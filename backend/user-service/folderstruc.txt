user-service/
├── .env
├── .gitignore
├── package.json
├── package-lock.json
├── README.md
├── prisma/
│   ├── schema.prisma
│   ├── migrations/
│   │   ├── 20231010120000_init/
│   │   └── ...
│   └── seed.ts
├── src/
│   ├── config/
│   │   ├── db.js
│   │   ├── redis.js
│   │   ├── jwt.js
│   │   ├── roles.js
│   │   └── index.js
│   ├── controllers/
│   │   ├── authController.js
│   │   ├── userController.js
│   │   ├── roleController.js
│   │   └── inviteController.js
│   ├── middleware/
│   │   ├── authMiddleware.js
│   │   ├── roleMiddleware.js
│   │   ├── inviteMiddleware.js
│   │   └── errorHandler.js
│   ├── models/
│   │   └── prismaClient.js
│   ├── routes/
│   │   ├── authRoutes.js
│   │   ├── userRoutes.js
│   │   ├── roleRoutes.js
│   │   └── inviteRoutes.js
│   ├── services/
│   │   ├── authService.js
│   │   ├── userService.js
│   │   ├── roleService.js
│   │   ├── inviteService.js
│   │   └── emailService.js
│   ├── utils/
│   │   ├── logger.js
│   │   ├── validation.js
│   │   ├── helpers.js
│   │   ├── constants.js
│   │   └── permissions.js
│   ├── validators/
│   │   ├── authValidators.js
│   │   ├── userValidators.js
│   │   ├── roleValidators.js
│   │   └── inviteValidators.js
│   ├── tests/
│   │   ├── unit/
│   │   │   ├── auth.test.js
│   │   │   ├── user.test.js
│   │   │   ├── role.test.js
│   │   │   └── invite.test.js
│   │   └── integration/
│   │       ├── auth.test.js
│   │       ├── user.test.js
│   │       ├── role.test.js
│   │       └── invite.test.js
│   └── app.js
└── Dockerfile





user-service/
├── .env
├── .gitignore
├── Dockerfile
├── package.json
├── package-lock.json
├── README.md
│
├── prisma/
│   ├── schema.prisma
│   ├── migrations/
│   │   ├── 20231010120000_init/
│   │   └── ...
│   ├── seed/
│   │   ├── roles.js
│   │   ├── permissions.js
│   │   ├── rolePermissions.js
│   │   ├── users.js
│   │   ├── index.js
│   └── seed.ts
│
├── src/
│   ├── config/
│   │   ├── db.js           ✅ (Moved from models/)
│   │   ├── redis.js
│   │   ├── authConfig.js   ✅ (Renamed from jwt.js)
│   │   ├── env.js          ✅ (Centralized env loading)
│   │   ├── roles.js
│   │   ├── server.js       ✅ (New server configuration)
│   │   └── index.js
│   │
│   ├── controllers/
│   │   ├── authController.js
│   │   ├── userController.js
│   │   ├── roleController.js
│   │   ├── inviteController.js
│   │
│   ├── middleware/
│   │   ├── authMiddleware.js
│   │   ├── roleMiddleware.js
│   │   ├── inviteMiddleware.js
│   │   ├── errorHandler.js
│   │
│   ├── routes/
│   │   ├── authRoutes.js
│   │   ├── userRoutes.js
│   │   ├── roleRoutes.js
│   │   ├── inviteRoutes.js
│   │
│   ├── services/
│   │   ├── authService.js
│   │   ├── userService.js
│   │   ├── roleService.js
│   │   ├── inviteService.js
│   │   ├── emailService.js
│   │
│   ├── utils/
│   │   ├── logger.js
│   │   ├── validation.js
│   │   ├── helpers.js
│   │   ├── constants.js
│   │   ├── permissions.js
│   │
│   ├── validators/
│   │   ├── authValidators.js
│   │   ├── userValidators.js
│   │   ├── roleValidators.js
│   │   ├── inviteValidators.js
│   │
│   ├── tests/
│   │   ├── unit/
│   │   │   ├── auth.test.js
│   │   │   ├── user.test.js
│   │   │   ├── role.test.js
│   │   │   └── invite.test.js
│   │   └── integration/
│   │       ├── auth.test.js
│   │       ├── user.test.js
│   │       ├── role.test.js
│   │       └── invite.test.js
│   │
│  
│   ├── server.js          ✅ (Main server entry file)
│   │
└── Dockerfile


Explanation of the Structure
1. Root Level Files
.env: Environment variables (e.g., database credentials, JWT secret, email credentials).

.gitignore: Specifies files and folders to ignore in version control.

package.json & package-lock.json: Manage dependencies and scripts.

README.md: Documentation for the project.

Dockerfile: For containerizing the microservice.

2. src/ Directory
config/
db.js: Database connection setup.

redis.js: Redis connection setup (for caching or session management).

jwt.js: JWT configuration (e.g., secret, expiration).

roles.js: Predefined roles and permissions (e.g., Super Admin, HR Admin, Recruiter Admin, etc.).

index.js: Centralized configuration exports.

controllers/
authController.js: Handles login, token refresh, and logout.

userController.js: Handles user-related operations (e.g., CRUD, assigning roles).

roleController.js: Handles role creation, modification, and permission assignment.

inviteController.js: Handles invite creation, validation, and team member onboarding.

middleware/
authMiddleware.js: Verifies JWT tokens and authenticates users.

roleMiddleware.js: Checks user roles for authorization.

inviteMiddleware.js: Validates invite tokens and ensures proper onboarding.

errorHandler.js: Centralized error handling.

models/
User.js: User schema and methods.

Role.js: Role schema and methods.

Invite.js: Invite schema for managing team member invitations.

Permission.js: Permission schema for fine-grained access control.

routes/
authRoutes.js: Routes for authentication (e.g., /login, /logout, /refresh-token).

userRoutes.js: Routes for user operations (e.g., /users, /users/:id).

roleRoutes.js: Routes for role operations (e.g., /roles, /roles/:id).

inviteRoutes.js: Routes for invite operations (e.g., /invites, /invites/validate).

services/
authService.js: Handles authentication logic (e.g., password validation, token generation).

userService.js: Handles user-related business logic (e.g., CRUD, role assignment).

roleService.js: Handles role-related business logic (e.g., role creation, permission assignment).

inviteService.js: Handles invite creation, validation, and team member onboarding.

emailService.js: Handles email notifications (e.g., invite emails).

utils/
logger.js: Centralized logging (e.g., using Winston).

validation.js: Custom validation functions.

helpers.js: Helper functions (e.g., generating random strings, formatting responses).

constants.js: Constants (e.g., error messages, status codes).

permissions.js: Utility functions for checking and assigning permissions.

validators/
authValidators.js: Validation for authentication routes.

userValidators.js: Validation for user routes.

roleValidators.js: Validation for role routes.

inviteValidators.js: Validation for invite routes.

tests/
unit/: Unit tests for individual components.

integration/: Integration tests for API endpoints.

app.js
Main application file (initializes Express, middleware, and routes).

3. Dockerfile
Used to containerize the microservice for deployment.

Key Features of the Structure
Role Hierarchy:

Roles and permissions are defined in config/roles.js.

Fine-grained permissions are enforced using roleMiddleware.js and permissions.js.

Invite System:

Invites are managed via the Invite model and inviteController.js.

Invite validation and onboarding are handled by inviteMiddleware.js.

No Registration:

Only login functionality is implemented in authController.js.

New users are onboarded via invites.

Scalability:

Modular structure allows easy addition of new roles, permissions, or features.

Redis can be used for caching frequently accessed data (e.g., roles, permissions).

Security:

JWT tokens are used for authentication.

Passwords are hashed before storage.

Input validation is enforced for all routes.

Testing:

Unit and integration tests ensure reliability and maintainability.



📌 1️⃣ Audit Logs (audit-%DATE%.log)
Purpose: Tracks critical system actions for security, compliance, and monitoring.
✅ Captures WHO performed WHAT action, WHEN, and WHERE.

🔹 Events Recorded in Audit Logs
Event Type	Example Log Message
User Login	"User john@nexthire.tech logged in successfully."
User Logout	"User john@nexthire.tech logged out."
Role Assigned	"User HR_ADMIN assigned role RECRUITER_ADMIN to user candidate1@nexthire.tech."
Permission Changed	"User SUPER_ADMIN granted permission MANAGE_USERS to HR_ADMIN."
User Invited	"HR_ADMIN invited candidate1@nexthire.tech to the platform."
Job Created	"Recruiter posted a new job: 'Senior Backend Engineer'."
Interview Scheduled	"Interview scheduled for candidate Alex on 2024-04-10."
System Configuration Change	"Super Admin updated system settings."
User Deactivated	"User recruiter2@nexthire.tech was deactivated."
🔍 Stored in → logs/audit-%DATE%.log

📌 2️⃣ Auth Logs (auth-%DATE%.log)
Purpose: Tracks authentication-related activities such as login, logout, failed attempts, and suspicious behavior.
✅ Captures WHO attempted authentication, WHEN, and the result.

🔹 Events Recorded in Auth Logs
Event Type	Example Log Message
User Login Success	"User recruiter@nexthire.tech logged in successfully."
User Logout	"User candidate1@nexthire.tech logged out."
Failed Login Attempt	"Failed login attempt for user candidate1@nexthire.tech."
Invalid Token Attempt	"User tried accessing protected route with invalid token."
Unauthorized Access	"Blocked unauthorized access attempt to /api/admin by IP 192.168.1.10."
Multiple Failed Logins	"Multiple failed login attempts detected for user hr@nexthire.tech. Possible brute force."
Password Reset Request	"User john@nexthire.tech requested a password reset."
🔍 Stored in → logs/auth-%DATE%.log

🔹 Key Differences Between Audit & Auth Logs
Feature	Audit Logs (audit-%DATE%.log)	Auth Logs (auth-%DATE%.log)
Purpose	Tracks critical system actions	Tracks authentication activities
Who Triggers?	Admins, Recruiters, System	Users, Attackers (failed login attempts)
Examples	Role changes, Job posts, Interviews	Login, Logout, Failed Login, Token Issues
Security Impact	High (tracks admin & system events)	Medium (tracks user authentication issues)
Used For	Compliance, Security Audits, Investigations	Security Monitoring, Account Protection
